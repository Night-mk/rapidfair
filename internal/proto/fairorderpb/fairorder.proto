syntax = "proto3";

package fairorderpb;

import "gorums.proto";

// import "google/protobuf/empty.proto";

// option go_package = "github.com/relab/hotstuff/internal/proto/hotstuffpb";
option go_package = "github.com/Night-mk/rapidfair/internal/proto/fairorderpb";

service FairCollect{
    // 增加collection阶段，leaderRotation后，replica需要主动发送tx seq给当前leader
    rpc Collect(CollectTxSeq) returns (CollectTxSeq) {
        option (gorums.unicast) = true; // 单播是replica给当前leader节点发消息？
    }

    // 增加pre-propose阶段（for pre-verification）
}

// 收集交易序列的消息
message CollectTxSeq {
    // uint32 ReplicaId = 1; // replica ID
    uint64 View = 1; // collect阶段对应的view，leader收到消息后如果发现该view的消息已经发过，则不会处理重复的消息
    bytes TxSeq = 2; // 交易序列数组进行序列化变为byte
}
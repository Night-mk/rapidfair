syntax = "proto3";

package hotstuffpb;

import "gorums.proto";

import "google/protobuf/empty.proto";

option go_package = "github.com/relab/hotstuff/internal/proto/hotstuffpb";

service Hotstuff {
  rpc Propose(Proposal) returns (google.protobuf.Empty) {
    option (gorums.multicast) = true;
  }

  rpc Vote(PartialCert) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
  }

  // 超时使用广播？
  rpc Timeout(TimeoutMsg) returns (google.protobuf.Empty) {
    option (gorums.multicast) = true;
  }
  // newview使用单播
  rpc NewView(SyncInfo) returns (google.protobuf.Empty) {
    option (gorums.unicast) = true;
  }

  rpc Fetch(BlockHash) returns (Block) { option (gorums.quorumcall) = true; }

  // RapidFair: baseline
  // 增加collect阶段，replica发送tx seq给当前leader
  rpc Collect(CollectTxSeq) returns (CollectTxSeq) {
      option (gorums.unicast) = true; // 单播是replica给当前leader节点发消息
  }

  // 增加readyCollect阶段，leader需要广播ReadyCollectMsg，通知replicas可以开始发送collect消息给当前leader
  rpc ReadyCollect(ReadyCollectMsg) returns (google.protobuf.Empty) {
    option (gorums.multicast) = true;
  }

  // baseline中Collect阶段用quorumcall会快吗？
}

// RapidFair: baseline
// 收集交易序列的消息
message CollectTxSeq {
  // uint32 ReplicaId = 1; // replica ID
  uint64 View = 1; // collect阶段对应的view，leader收到消息后如果发现该view的消息已经发过，则不会处理重复的消息
  bytes TxSeq = 2; // 交易序列数组进行序列化变为byte
  SyncInfo SyncInfo = 3; // 给collect消息增加同步信息
}

// 通知可以开始收集交易序列的消息
message ReadyCollectMsg{
  uint64 View = 1;
  SyncInfo SyncInfo = 2;
}

message Proposal {
  Block Block = 1;
  optional AggQC AggQC = 2;
}

message BlockHash { bytes Hash = 1; }

// message Block {
//   bytes Parent = 1;
//   QuorumCert QC = 2;
//   uint64 View = 3;
//   bytes Command = 4;
//   uint32 Proposer = 5;
// }
// RapidFair: baseline 增加TxSeq字段，传输交易序列数组
message Block {
  bytes Parent = 1;
  QuorumCert QC = 2;
  uint64 View = 3;
  bytes Command = 4;
  uint32 Proposer = 5;
  bytes TxSeq = 6;
}

message ECDSASignature {
  uint32 Signer = 1;
  bytes R = 2;
  bytes S = 3;
}

message BLS12Signature { bytes Sig = 1; }

message Signature {
  oneof Sig {
    ECDSASignature ECDSASig = 1;
    BLS12Signature BLS12Sig = 2;
  }
}

message PartialCert {
  QuorumSignature Sig = 1;
  bytes Hash = 2;
}

message ECDSAMultiSignature { repeated ECDSASignature Sigs = 1; }

message BLS12AggregateSignature {
  bytes Sig = 1;
  bytes participants = 2;
}

message QuorumSignature {
  oneof Sig {
    ECDSAMultiSignature ECDSASigs = 1;
    BLS12AggregateSignature BLS12Sig = 2;
  }
}

message QuorumCert {
  QuorumSignature Sig = 1;
  uint64 View = 2;
  bytes Hash = 3;
}

message TimeoutCert {
  QuorumSignature Sig = 1;
  uint64 View = 2;
}

message TimeoutMsg {
  uint64 View = 1;
  SyncInfo SyncInfo = 2;
  QuorumSignature ViewSig = 3;
  optional QuorumSignature MsgSig = 4;
}

message SyncInfo {
  optional QuorumCert QC = 1;
  optional TimeoutCert TC = 2;
  optional AggQC AggQC = 3;
}

message AggQC {
  map<uint32, QuorumCert> QCs = 1;
  QuorumSignature Sig = 2;
  uint64 View = 3;
}
